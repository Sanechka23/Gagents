import telebot
from groq import Groq
from collections import defaultdict
import pandas as pd

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
client = Groq(api_key="")
bot = telebot.TeleBot("")

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
with open("–ú–µ–Ω—é.txt", "r", encoding="utf-8") as f:
    menu_content = f.read()

table_seats = pd.read_csv("table_seats.csv")
reservations = pd.read_csv("reservations.csv")
closed_items = pd.read_csv("closed_items.csv")

def get_tables_info() -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–æ–ª–∞—Ö –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞"""
    return "\n".join([f"–°—Ç–æ–ª {row['–ù–æ–º–µ—Ä —Å—Ç–æ–ª–∞']} ({row['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç']} –º–µ—Å—Ç)"
                     for _, row in table_seats.iterrows()])

def get_raw_reservations() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    reservations_text = []
    for _, row in reservations.iterrows():
        table_info = [f"–°—Ç–æ–ª {row['–ù–æ–º–µ—Ä —Å—Ç–æ–ª–∞']}:"]
        for col in reservations.columns[1:]:
            table_info.append(f"{col}: {row[col]}")
        reservations_text.append("\n".join(table_info))
    return "\n\n".join(reservations_text)

def get_closed_items() -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –º–µ–Ω—é"""
    closed = closed_items['–ó–∞–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏'].tolist()
    return "–ó–∞–∫—Ä—ã—Ç–æ: " + ", ".join(closed) if closed else "–í—Å–µ –±–ª—é–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã"

SYSTEM_PROMPT = f"""
–¢—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ "–°–∏–ª–∞—É—à—É". –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–º.

–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ:

=== –ú–ï–ù–Æ ===
{menu_content}

=== –°–¢–û–õ–´ ===
{get_tables_info()}

=== –ë–†–û–ù–ò–†–û–í–ê–ù–ò–Ø ===
{get_raw_reservations()}

=== –ó–ê–ö–†–´–¢–´–ï –ü–û–ó–ò–¶–ò–ò ===
{get_closed_items()}

–ü—Ä–∞–≤–∏–ª–∞ –æ—Ç–≤–µ—Ç–∞:
1. –î–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø—Ä–æ—Å–∏: –¥–∞—Ç—É, –≤—Ä–µ–º—è –∏ —á–∏—Å–ª–æ –≥–æ—Å—Ç–µ–π
2. –í —Ç–∞–±–ª–∏—Ü–µ –µ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏ –∏ –Ω–∞–¥–ø–∏—Å–∏ –°–≤–æ–±–æ–¥–µ–Ω. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —Å–æ–≤–µ—Ä—à–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –≤—Ä–µ–º—è, –ø–æ–ø–æ–¥–∞—é—â–µ–µ —Ö–æ—Ç—è –±—ã –æ—Ç —á–∞—Å—Ç–∏ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –∏–º–µ—é—â–∏–π—Å—è –≤ —Ç–∞–±–ª–∏—Ü–µ, —Ç–æ —Ç—ã –¥–æ–ª–∂–µ–Ω –µ–º—É –æ—Ç–∫–∞–∑–∞—Ç—å –≤ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
3. –£—á–∏—Ç—ã–≤–∞–π, —á—Ç–æ "–°–≤–æ–±–æ–¥–µ–Ω" = –≤–µ—Å—å –¥–µ–Ω—å –¥–æ—Å—Ç—É–ø–µ–Ω
4. –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ - –ø–æ–∫–∞–∂–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ –¥–µ–Ω—å
5. –§–æ—Ä–º–∞—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç—ã –ª–∞–∫–æ–Ω–∏—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
6. –ù–µ–ª—å–∑—è –≤—ã–≤–æ–¥–∏—Ç—å –≤—Å–µ –º–µ–Ω—é –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
7. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è –≥–æ–≤–æ—Ä–∏—Ç—å –æ —Ç–µ–º–∞—Ö –Ω–µ—Å–∑—è–≤–∞–Ω–Ω—ã—Ö —Å —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–º, —Å—Ç–∞—Ä–∞—è–π—Å—è –≤–µ–∂–ª–∏–≤–æ –≤–µ—Ä–Ω—É—Ç—å –¥–∏–∞–ª–æ–≥ –≤ –Ω—É–∂–Ω—É—é —Ç–µ–º–∞—Ç–∏–∫—É\n'
8. –Ω–µ –∑–∞–±—ã–≤–∞–π –∏–Ω–æ–≥–¥–∞ –¥–æ–±–æ–≤–ª—è—Ç—å —ç–º–æ–¥–∑–∏
"""

chat_histories = defaultdict(list)

@bot.message_handler(commands=['start'])
def send_welcome(message):
    with open("photo_2025-02-02_06-59-29.jpg", 'rb') as photo:
        bot.send_photo(message.chat.id, photo)

    welcome_msg = (
        "üç£ –ü—Ä–∏–≤–µ—Ç! –Ø –ß–∏—á–∏ - –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –∫–∞—Ñ–µ –°–∏–ª–∞—É—à—É!\n"
        "–ú–æ–≥—É –ø–æ–º–æ—á—å —Å:\n"
        "‚Ä¢ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å—Ç–æ–ª–∏–∫–∞\n"
        "‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–µ–Ω—é\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–æ–π –∑–∞–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π\n\n"
    )
    bot.send_message(message.chat.id, welcome_msg)

@bot.message_handler(content_types=['text'])
def handle_message(message):
    user_id = message.from_user.id
    text = message.text.strip()

    try:
        messages = [
            {"role": "system", "content": SYSTEM_PROMPT},
            *[{"role": "user" if msg["is_user"] else "assistant", "content": msg["content"]}
              for msg in chat_histories[user_id][-4:]],
            {"role": "user", "content": text}
        ]

        response = client.chat.completions.create(
            model="gemma2-9b-it",
            messages=messages,
            temperature=0.3
        )

        if not response or not response.choices:
            raise RuntimeError("–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò-–º–æ–¥–µ–ª–∏")

        ai_response = response.choices[0].message.content

        sent_message = bot.send_message(message.chat.id, ai_response)

        chat_histories[user_id].extend([
            {"is_user": True, "content": text},
            {"is_user": False, "content": ai_response}
        ])

        chat_histories[user_id] = chat_histories[user_id][-14:]

    except Exception as e:
        print(f"Error: {str(e)}")
        if not message.from_user.is_bot: 
            bot.send_message(
                message.chat.id,
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–Ω–∞—á–µ."
            )

if __name__ == "__main__":
    bot.infinity_polling()