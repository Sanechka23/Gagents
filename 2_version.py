import telebot
import re
from groq import Groq
from collections import defaultdict
import pandas as pd


client = Groq(api_key="")
bot = telebot.TeleBot("")


with open("–ú–µ–Ω—é.txt", "r", encoding="utf-8") as f:
    menu_content = f.read()
menu_content = menu_content.replace("{", "{{").replace("}", "}}")

table_seats = pd.read_csv("table_seats.csv")
reservations = pd.read_csv("reservations.csv")


reservation_params = defaultdict(lambda: {"date": None, "time": None, "guest_count": None})


def retrieve_available_tables(date: str, time_input: str) -> list:
    fuzzy_times = {
        "—É—Ç—Ä–æ": ("08:00", "12:00"),
        "–¥–Ω–µ–º": ("12:00", "18:00"),
        "–≤–µ—á–µ—Ä–æ–º": ("18:00", "23:00")
    }
    if time_input in fuzzy_times:
        requested_start, requested_end = fuzzy_times[time_input]
    elif "-" in time_input:
        requested_start, requested_end = [s.strip() for s in time_input.split("-")]
    else:
        requested_start, requested_end = time_input, time_input

    matched_column = None
    for col in reservations.columns:
        if date.lower() in col.lower():
            matched_column = col
            break
    if not matched_column:
        return []

    available_tables = []
    for _, row in reservations.iterrows():
        slot = str(row[matched_column]).strip()
        if slot.lower() == "—Å–≤–æ–±–æ–¥–µ–Ω":
            available_tables.append(row["–ù–æ–º–µ—Ä —Å—Ç–æ–ª–∞"])
        else:
            if requested_start and requested_end:
                def time_to_minutes(t: str) -> int:
                    h, m = map(int, t.split(":"))
                    return h * 60 + m
                req_start = time_to_minutes(requested_start)
                req_end = time_to_minutes(requested_end)
                try:
                    booked_start, booked_end = [s.strip() for s in slot.split("-")]
                except Exception:
                    continue
                booked_start_m = time_to_minutes(booked_start)
                booked_end_m = time_to_minutes(booked_end)
                if req_start < booked_end_m and req_end > booked_start_m:
                    continue
                else:
                    available_tables.append(row["–ù–æ–º–µ—Ä —Å—Ç–æ–ª–∞"])
            else:
                available_tables.append(row["–ù–æ–º–µ—Ä —Å—Ç–æ–ª–∞"])
    return available_tables


def check_table_capacity(guest_count: int, available_tables: list) -> bool:
    total_capacity = 0
    for table in available_tables:
        row = table_seats[table_seats["–ù–æ–º–µ—Ä —Å—Ç–æ–ª–∞"] == table]
        if not row.empty:
            total_capacity += int(row["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç"].iloc[0])
    return total_capacity >= guest_count

SYSTEM_PROMPT = f"""
–¢—ã –ò–ò-–∞–≥–µ–Ω—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ "–°–∏–ª–∞—É—à—É". –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ–≥–∞—Ç—å —Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å—Ç–æ–ª–∏–∫–æ–≤ –∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.

**–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:**
1. –í—Å–µ–≥–¥–∞ —Å–Ω–∞—á–∞–ª–∞ –∏–∑–≤–ª–µ–∫–∞–π –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–∞—Ç–∞, –≤—Ä–µ–º—è, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π).
2. –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã, –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –≤—ã–∑–æ–≤–∏ —Ñ—É–Ω–∫—Ü–∏–∏:
   - `retrieve_available_tables(–¥–∞—Ç–∞, –≤—Ä–µ–º—è)` –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–æ–ª–æ–≤.
   - `check_table_capacity(–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π, —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–æ–≤)` –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.
3. –§–æ—Ä–º–∏—Ä—É–π –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
   - CALL: retrieve_available_tables("–¥–∞—Ç–∞", "–≤—Ä–µ–º—è")
   - CALL: check_table_capacity(–≥–æ—Å—Ç–∏, [—Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–æ–≤])
4. –ï—Å–ª–∏ –≤—ã–∑—ã–≤–∞–µ—à—å —Ñ—É–Ω–∫—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù–µ –ø—ã—Ç–∞–π—Å—è –ø—Ä–∏–¥—É–º–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
5. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏ –∏ –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏.

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:**
- `retrieve_available_tables(date, time)` ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç–æ–ª–æ–≤
- `check_table_capacity(guest_count, available_tables)` ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç bool (–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –º–µ—Å—Ç)

**–ú–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞:** {menu_content}
"""


chat_histories = defaultdict(list)

@bot.message_handler(commands=['start'])
def send_welcome(message):
    with open("photo_2025-02-02_06-59-29.jpg", "rb") as photo:
        bot.send_photo(message.chat.id, photo)
    welcome_msg = (
        "üç£ –ü—Ä–∏–≤–µ—Ç! –Ø –ß–∏—á–∏ ‚Äì —Ç–≤–æ–π –ò–ò-–∞–≥–µ–Ω—Ç –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ –°–∏–ª–∞—É—à—É.\n"
        "–Ø –ø–æ–º–æ–≥—É —Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å—Ç–æ–ª–∏–∫–∞, —Ä–∞—Å—Å–∫–∞–∂—É –æ –º–µ–Ω—é –∏ –ø—Ä–æ–≤–µ—Ä—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å—Ç–æ–ª–æ–≤.\n"
    )
    bot.send_message(message.chat.id, welcome_msg)

@bot.message_handler(content_types=['text'])
def handle_message(message):
    user_id = message.from_user.id
    user_input = message.text.strip()


    chat_histories[user_id].append({"role": "user", "content": user_input})

    messages = [{"role": "system", "content": SYSTEM_PROMPT}]
    messages.extend(chat_histories[user_id])

    try:
        response = client.chat.completions.create(
            model="llama3-70b-8192",
            messages=messages,
            temperature=0.3
        )
        if not response or not response.choices:
            raise RuntimeError("–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò-–º–æ–¥–µ–ª–∏")
        final_reply = response.choices[0].message.content.strip()


        call_match = re.match(r"CALL: (\w+)\((.*)\)", final_reply)
        if call_match:
            function_name = call_match.group(1)
            args = eval(call_match.group(2))

            if function_name == "retrieve_available_tables":
                result = retrieve_available_tables(*args)
                bot.send_message(message.chat.id, f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–æ–ª—ã: {result}")
            elif function_name == "check_table_capacity":
                result = check_table_capacity(*args)
                bot.send_message(message.chat.id, f"–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç: {'–¥–∞' if result else '–Ω–µ—Ç'}")
        else:
            bot.send_message(message.chat.id, final_reply)

        chat_histories[user_id].append({"role": "assistant", "content": final_reply})
    except Exception as e:
        print(f"Error: {str(e)}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–Ω–∞—á–µ.")

if __name__ == "__main__":
    bot.infinity_polling()
